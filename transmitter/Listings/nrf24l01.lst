C51 COMPILER V9.60.0.0   NRF24L01                                                          11/24/2022 12:56:53 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Objects\nrf24l01.obj
COMPILER INVOKED BY: D:\APP\Keil\C51\BIN\C51.EXE nrf24l01.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\nrf24l01.lst) TABS(2) OBJECT(.\Objects\nrf24l01.obj)

line level    source

   1          #include "commom.h"
   2          
   3          
   4          U8 SPI_RW(U8 byte){
   5   1        U8 i;
   6   1        for(i=0; i<8; i++)
   7   1        {
   8   2          if(byte & 0x80)
   9   2            MOSI = 1;
  10   2          else
  11   2            MOSI = 0;
  12   2          byte = (byte << 1);
  13   2          SCK = 1;
  14   2          byte |= MISO;
  15   2          SCK = 0;
  16   2        }
  17   1        return byte;
  18   1      }
  19          
  20          void nRF24L01P_Write_Reg(U8 reg, U8 value){
  21   1        CSN = 0;
  22   1        SPI_RW(reg);
  23   1        SPI_RW(value);
  24   1        CSN = 1;
  25   1      }
  26          
  27          void nRF24L01P_Write_Buf(U8 reg, const U8 *pBuf, U8 bytes){
  28   1        U8 i;
  29   1      
  30   1        CSN = 0;                                        
  31   1        SPI_RW(reg);                          
  32   1        for(i=0; i<bytes; i++)     
  33   1          SPI_RW(*pBuf++);
  34   1        CSN = 1;     
  35   1      } 
  36          
  37          U8 nRF24L01P_Read_Reg(U8 reg){
  38   1        U8 value;
  39   1      
  40   1        CSN = 0;    
  41   1        SPI_RW(reg);      
  42   1        value = SPI_RW(0);
  43   1        CSN = 1;              
  44   1      
  45   1        return(value);
  46   1      }
  47          
  48          
  49          void RF24_SetRfCh(U8 ch){
  50   1        CE = 0;
  51   1        nRF24L01P_Write_Reg(WR_RF_CH, ch);                          //ÉèÖÃ±ä¸üÉäÆµÍ¨µÀ
  52   1        CE = 1;
  53   1      }
  54          
C51 COMPILER V9.60.0.0   NRF24L01                                                          11/24/2022 12:56:53 PAGE 2   

  55          void RF24_Init(){
  56   1        SCK = 0;                                  //SPIÊ±ÖÓÏßÀ­µÍ
  57   1        CSN = 1;                                  //Æ¬Ñ¡½ÅÀ­¸ß´¦ÓÚÎ´Ñ¡×´Ì¬
  58   1        CE  = 0;                                  //À­µÍÊ¹ÄÜÅäÖÃ£¬ÊÕ·¢Ê±ÒªÀ­¸ß
  59   1        IRQ = 1;                                  //ÖÐ¶ÏÒý½ÅÌ§¸ß´¦ÓÚÎ´´¥·¢ÖÐ¶Ï×´Ì¬
  60   1      
  61   1        CE = 0;
  62   1        nRF24L01P_Write_Reg(WR_SETUP_AW, 0x03);                           //ÉèÖÃµØÖ·¿í¶ÈÎª5×Ö½Ú
  63   1        nRF24L01P_Write_Reg(WR_RF_SETUP, RFSETUP);                    //Êý¾Ý´«ÊäÂÊ¡¢·¢Éä¹¦ÂÊÅäÖÃÎª¹«¹²±äÁ¿RfSetupµÄÖµ
  64   1        nRF24L01P_Write_Reg(WR_EN_AA, 0x01);                            //Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
  65   1        nRF24L01P_Write_Reg(WR_EN_RXADDR, 0x01);                    //Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
  66   1        nRF24L01P_Write_Reg(WR_RX_PW_P0, TX_PLOAD_WIDTH);               //½ÓÊÕÍ¨µÀ0Ñ¡ÔñºÍ·¢ËÍÍ¨µÀÏàÍ¬ÓÐÐ§Êý¾Ý¿í¶È£¬½ö½Ó
             -ÊÕÓÐÐ§
  67   1        nRF24L01P_Write_Reg(WR_SETUP_RETR, RETE_VAL);               //×Ô¶¯ÖØ·¢Ê±¼ä¼ä¸ôºÍÖØ·¢´ÎÊý£¬½ö·¢ËÍÓÐÐ§
  68   1        CE = 1;
  69   1      }
  70          
  71          void RF24_TX_Mode(U8 *toAddr)
  72          {
  73   1        CE = 0;
  74   1        nRF24L01P_Write_Buf(WR_TX_ADDR, toAddr, TX_ADR_WIDTH);            //Ð´Èë·¢ËÍµØÖ·
  75   1        nRF24L01P_Write_Reg(WR_CONFIG, 0x0E);                       //CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬¿ª»ú£¬·¢ËÍÄ£Ê½£¬ÆÁ±Î×Ô¶¯ÖØ·¢Ö
             -Ð¶Ï
  76   1        nRF24L01P_Write_Buf(WR_RX_ADDR_P0, toAddr, TX_ADR_WIDTH);         //ÎªÁËÓ¦´ð½ÓÊÕÉè±¸£¬½ÓÊÕÍ¨µÀ0µØÖ·ºÍ·¢ËÍµØÖ·
             -ÏàÍ¬
  77   1        nRF24L01P_Write_Reg(WR_STATUS, 0xFF);                     //Çå³ýËùÓÐµÄÖÐ¶Ï±êÖ¾Î»
  78   1        //CE = 1;
  79   1      }
  80          
  81          bit RF24_TxData(U8 *txbuf)
  82          {
  83   1        U8 state;
  84   1        
  85   1        while(RPD == 1);
  86   1        CE=0;                                   //CEÀ­µÍ£¬Ê¹ÄÜ24L01ÅäÖÃ
  87   1        nRF24L01P_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);            //Ð´Êý¾Ýµ½TX FIFO,32¸ö×Ö½Ú
  88   1        CE=1;                                   //CEÖÃ¸ß£¬Ê¹ÄÜ·¢ËÍ     
  89   1      
  90   1        while(IRQ == 1);                              //µÈ´ý·¢ËÍÍê³É
  91   1        state=nRF24L01P_Read_Reg(STATUS);                       //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷µÄÖµ     
  92   1        nRF24L01P_Write_Reg(WR_STATUS, state);                    //Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
  93   1        if(state&TX_DS)                               //·¢ËÍÍê³É
  94   1          return ON;
  95   1        nRF24L01P_Write_Reg(FLUSH_TX,0xff);                     //Çå³ýTX FIFO¼Ä´æÆ÷ 
  96   1        return OFF;                                 //·¢ËÍÊ§°Ü
  97   1      }
  98          
  99          
 100          
 101          
 102          
 103          
 104          
 105          
 106          
 107          
 108          
 109          
 110          
 111          
 112          
 113          
C51 COMPILER V9.60.0.0   NRF24L01                                                          11/24/2022 12:56:53 PAGE 3   

 114          
 115          
 116          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    265    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
