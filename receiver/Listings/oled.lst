C51 COMPILER V9.60.0.0   OLED                                                              11/27/2022 13:31:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\APP\Keil\C51\BIN\C51.EXE oled.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ole
                    -d.lst) TABS(2) OBJECT(.\Objects\oled.obj)

line level    source

   1          #include "commom.h"
   2          #include "font.h"
   3          
   4          u8 cmd_data[27]={0xae,0x00,0x10,0x40,0xb0,0x81,0xff,0xa1,0xa6,
   5                           0xa8,0x3f,0xc8,0xd3,0x00,0xd5,0x80,0xd8,0x05,
   6                           0xd9,0xf1,0xda,0x12,0xd8,0x30,0x8d,0x14,0xaf};
   7          
   8          void IIC_Start()
   9          {
  10   1        SCL = 1; SDA = 1; SDA = 0; SCL = 0;
  11   1      }
  12          
  13          void IIC_Stop()
  14          {
  15   1        SCL = 1; SDA = 0; SDA = 1;
  16   1      }
  17          
  18          void IIC_Wait_Ack()
  19          {
  20   1        SCL = 1; SCL = 0;
  21   1      }
  22          
  23          void Write_IIC_Byte(u8 IIC_Byte)
  24          {
  25   1        u8 i;
  26   1        u8 m, da;
  27   1        da = IIC_Byte;
  28   1        SCL = 0;
  29   1        for (i = 0; i < 8; i++)
  30   1        {
  31   2          m = da;
  32   2          m = m & 0x80;
  33   2          if (m == 0x80)
  34   2          {
  35   3            SDA = 1;
  36   3          }
  37   2          else SDA = 0;
  38   2          da = da << 1;
  39   2          SCL = 1; SCL = 0;
  40   2        }
  41   1      }
  42          
  43          void Write_IIC_CMD(u8 IIC_CMD)
  44          {
  45   1        IIC_Start();
  46   1        Write_IIC_Byte(0x78);            //Slave address,SA0=0
  47   1        IIC_Wait_Ack();
  48   1        Write_IIC_Byte(0x00);     //write command
  49   1        IIC_Wait_Ack();
  50   1        Write_IIC_Byte(IIC_CMD);
  51   1        IIC_Wait_Ack();
  52   1        IIC_Stop();
  53   1      }
  54          
C51 COMPILER V9.60.0.0   OLED                                                              11/27/2022 13:31:22 PAGE 2   

  55          void Write_IIC_Data(u8 IIC_Data)
  56          {
  57   1        IIC_Start();
  58   1        Write_IIC_Byte(0x78);     //D/C#=0; R/W#=0
  59   1        IIC_Wait_Ack();
  60   1        Write_IIC_Byte(0x40);     //write data
  61   1        IIC_Wait_Ack();
  62   1        Write_IIC_Byte(IIC_Data);
  63   1        IIC_Wait_Ack();
  64   1        IIC_Stop();
  65   1      }
  66          
  67          //OLED_PART
  68          
  69          void OLED_WR_Byte(u16 dat, u16 cmd)
  70          {
  71   1        if (cmd)
  72   1        {
  73   2          Write_IIC_Data(dat);
  74   2        }
  75   1        else
  76   1        {
  77   2          Write_IIC_CMD(dat);
  78   2        }
  79   1      }
  80          
  81          void OLED_Set_Pos(u8 x, u8 y)
  82          {
  83   1        OLED_WR_Byte(0xb0 + y, SEND_CMD);
  84   1        OLED_WR_Byte(((x & 0xf0) >> 4) | 0x10, SEND_CMD);
  85   1        OLED_WR_Byte((x & 0x0f), SEND_CMD);
  86   1      }
  87          
  88          void OLED_Display_On(void)
  89          {
  90   1        OLED_WR_Byte(0X8D, SEND_CMD);  //SET DCDC????
  91   1        OLED_WR_Byte(0X14, SEND_CMD);  //DCDC ON
  92   1        OLED_WR_Byte(0XAF, SEND_CMD);  //DISPLAY ON
  93   1      }
  94          
  95          void OLED_Display_Off(void)
  96          {
  97   1        OLED_WR_Byte(0X8D, SEND_CMD);  //SET DCDC????
  98   1        OLED_WR_Byte(0X10, SEND_CMD);  //DCDC OFF
  99   1        OLED_WR_Byte(0XAE, SEND_CMD);  //DISPLAY OFF
 100   1      }
 101          
 102          void OLED_Clear(void)
 103          {
 104   1        u8 i, n;
 105   1        for (i = 0; i < 8; i++)
 106   1        {
 107   2          OLED_WR_Byte(0xb0 + i, SEND_CMD);    //??????????0~7??
 108   2          OLED_WR_Byte(0x00, SEND_CMD);      //?????????á??????
 109   2          OLED_WR_Byte(0x10, SEND_CMD);      //?????????á??????   
 110   2          for (n = 0; n < 128; n++)OLED_WR_Byte(0, SEND_DATA);
 111   2        }
 112   1      }
 113          void OLED_On(void)
 114          {
 115   1        u8 i, n;
 116   1        for (i = 0; i < 8; i++)
C51 COMPILER V9.60.0.0   OLED                                                              11/27/2022 13:31:22 PAGE 3   

 117   1        {
 118   2          OLED_WR_Byte(0xb0 + i, SEND_CMD);    //??????????0~7??
 119   2          OLED_WR_Byte(0x00, SEND_CMD);      //?????????á??????
 120   2          OLED_WR_Byte(0x10, SEND_CMD);      //?????????á??????   
 121   2          for (n = 0; n < 128; n++)OLED_WR_Byte(1, SEND_DATA);
 122   2        } //???????
 123   1      }
 124          //???????????h?????,???????????
 125          //x:0~127
 126          //y:0~63
 127          //mode:0,???????;1,???????         
 128          //size:??????? 16/12 
 129          void OLED_ShowChar(u8 x, u8 y, u8 chr, u8 Char_Size)
 130          {
 131   1        
 132   1        u8 c = 0, i = 0;
 133   1        c = chr - ' ';//?õ?t?????     
 134   1        if (x > Max_Column - 1)
 135   1        {
 136   2          x = 0; y = y + 2;
 137   2        }
 138   1      
 139   1        if (Char_Size == 16)
 140   1        {
 141   2          OLED_Set_Pos(x, y);
 142   2          for (i = 0; i < 8; i++)
 143   2            OLED_WR_Byte(F8X16[c * 16 + i], SEND_DATA);
 144   2          OLED_Set_Pos(x, y + 1);
 145   2          for (i = 0; i < 8; i++)
 146   2            OLED_WR_Byte(F8X16[c * 16 + i + 8], SEND_DATA);
 147   2        }
 148   1        else
 149   1        {
 150   2          OLED_Set_Pos(x, y);
 151   2          for (i = 0; i < 6; i++)
 152   2            OLED_WR_Byte(F6x8[c][i], SEND_DATA);
 153   2        }
 154   1      }
 155          
 156          void OLED_ShowString(u8 x, u8 y, u8 *chr, u8 Char_Size)
 157          {
 158   1        u8 j = 0;
 159   1        while (chr[j] != '\0')
 160   1        {
 161   2          OLED_ShowChar(x, y, chr[j], Char_Size);
 162   2          x += 8;
 163   2          if (x > 120) 
 164   2          { 
 165   3            x = 0; y += 2; 
 166   3          }
 167   2          j++;
 168   2        }
 169   1      }
 170          
 171          /***********????????????????BMP??128??64??'??????(x,y),x?k??0??127??y???k??0??7*****************/
 172          
 173          void OLED_Init(void)
 174          {
 175   1        u8 i = 0;
 176   1        while (i < 27)
 177   1        {
 178   2          OLED_WR_Byte(cmd_data[i], SEND_CMD);
C51 COMPILER V9.60.0.0   OLED                                                              11/27/2022 13:31:22 PAGE 4   

 179   2          i++;
 180   2        }
 181   1      }
 182          
 183          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    655    ----
   CONSTANT SIZE    =    553    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
